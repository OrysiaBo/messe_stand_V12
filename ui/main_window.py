#!/usr/bin/env python3
"""
–û–ü–¢–ò–ú–Ü–ó–û–í–ê–ù–ò–ô Main Window –¥–ª—è Dynamic Messe Stand V4
–ì—ñ–±—Ä–∏–¥–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥: –Ω–∞–¥—ñ–π–Ω—ñ—Å—Ç—å + —Ä–æ–∑—É–º–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è
"""

import tkinter as tk
from tkinter import ttk
import sys
import subprocess
from core.config import config
from core.theme import theme_manager, THEME_VARS, _mix, apply_bertrandt_theme
from core.logger import logger
from ui.tabs.home_tab import HomeTab
from ui.tabs.creator_tab import CreatorTab
from ui.tabs.demo_tab import DemoTab
from ui.tabs.presentation_tab import PresentationTab

class MainWindow:
    """–û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–µ –≥–æ–ª–æ–≤–Ω–µ GUI-–≤—ñ–∫–Ω–æ –∑ —Ä–æ–∑—É–º–Ω–æ—é —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—î—é"""
    
    def __init__(self, esp32_port=None):
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ Dynamic Messe Stand V4 –∑ –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–æ—é –∞—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–æ—é...")
        
        # Tkinter Root
        self.root = tk.Tk()
        self.root.title(config.gui['title'])
        
        # –ë–∞–∑–æ–≤—ñ –∑–º—ñ–Ω–Ω—ñ
        self.esp32_port = esp32_port
        self.fullscreen = False
        self.current_tab = "home"
        self.tabs = {}
        
        # Content Observer setup (—Ä–æ–∑—É–º–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥)
        self._setup_content_observer()
        
        # –û—Å–Ω–æ–≤–Ω–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        self.setup_window()
        self.setup_responsive_design()
        self.setup_styles()
        self.setup_gui_components()
        self.setup_tabs()
        
        # –ü–æ—á–∞—Ç–∫–æ–≤–∏–π —Ç–∞–±
        self.switch_tab("home")
        
        logger.info("‚úÖ Dynamic Messe Stand V4 —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π!")

    def _setup_content_observer(self):
        """–†–æ–∑—É–º–Ω–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–ø–æ—Å—Ç–µ—Ä—ñ–≥–∞—á–∞ –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
        try:
            from models.content import content_manager
            content_manager.add_observer(self._on_content_changed)
            logger.info("Content Observer —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π")
        except ImportError:
            logger.warning("Content Manager –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π - —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –≤–∏–º–∫–Ω–µ–Ω–∞")
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó Content Observer: {e}")

    def _on_content_changed(self, slide_id, slide_data, action='update'):
        """–û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –∑–º—ñ–Ω –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
        try:
            logger.debug(f"–°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∑–º—ñ–Ω slide {slide_id} ({action})")
            
            # –û–Ω–æ–≤–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ —Ç–∞–±–∏
            for tab_name, tab_instance in self.tabs.items():
                if tab_name == 'demo' and hasattr(tab_instance, 'sync_slide_change'):
                    tab_instance.sync_slide_change(slide_id, slide_data)
                elif tab_name == 'creator' and hasattr(tab_instance, 'refresh_thumbnails'):
                    tab_instance.refresh_thumbnails()
                elif tab_name == 'home' and hasattr(tab_instance, 'update_stats'):
                    tab_instance.update_stats()
            
            # –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å —É navbar
            self._update_status_indicator(f"Slide {slide_id} –æ–Ω–æ–≤–ª–µ–Ω–æ")
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –∫–æ–Ω—Ç–µ–Ω—Ç—É: {e}")

    def setup_window(self):
        """–ù–∞–ª–∞—à—Ç–æ–≤—É—î –≥–æ–ª–æ–≤–Ω–µ –≤—ñ–∫–Ω–æ –¥–ª—è 24" –º–æ–Ω—ñ—Ç–æ—Ä–∞"""
        self._detect_primary_monitor()
        
        # –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–æ –¥–ª—è 24" RTC Monitor
        self.window_width = self.primary_width
        self.window_height = self.primary_height
        
        logger.info(f"–ì–æ–ª–æ–≤–Ω–∏–π –º–æ–Ω—ñ—Ç–æ—Ä: {self.window_width}x{self.window_height} –Ω–∞ ({self.primary_x}, {self.primary_y})")
        
        # –ü–æ–∑–∏—Ü—ñ–æ–Ω—É–≤–∞–Ω–Ω—è –≤—ñ–∫–Ω–∞ –Ω–∞ –≥–æ–ª–æ–≤–Ω–æ–º—É –º–æ–Ω—ñ—Ç–æ—Ä—ñ
        self.root.geometry(f"{self.window_width}x{self.window_height}+{self.primary_x}+{self.primary_y}")
        self.root.minsize(config.gui['min_width'], config.gui['min_height'])
        
        # Fullscreen bindings
        self.root.bind('<F11>', self.toggle_fullscreen)
        self.root.bind('<Escape>', self.exit_fullscreen)
        
        # –ü–æ—á–∞—Ç–∫–æ–≤–∏–π fullscreen —Ä–µ–∂–∏–º
        if config.gui.get('fullscreen_on_start', True):
            self.root.attributes('-fullscreen', True)
            self.root.attributes('-topmost', True)
            self.fullscreen = True
        
        # –ó–∞–±–µ–∑–ø–µ—á–µ–Ω–Ω—è –∑–∞–ª–∏—à–µ–Ω–Ω—è –Ω–∞ –≥–æ–ª–æ–≤–Ω–æ–º—É –º–æ–Ω—ñ—Ç–æ—Ä—ñ
        self.root.after(200, self._ensure_primary_monitor)
        
        # –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è —Ç–µ–º–∏
        colors = theme_manager.get_colors()
        self.root.configure(bg=colors['background_primary'])

    def _detect_primary_monitor(self):
        """–í–∏—è–≤–ª—è—î –≥–æ–ª–æ–≤–Ω–∏–π –º–æ–Ω—ñ—Ç–æ—Ä"""
        try:
            self.root.update_idletasks()
            
            # –ó–∞–≥–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä –µ–∫—Ä–∞–Ω—É
            total_width = self.root.winfo_screenwidth()
            total_height = self.root.winfo_screenheight()
            
            # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º - –≥–æ–ª–æ–≤–Ω–∏–π –º–æ–Ω—ñ—Ç–æ—Ä
            self.primary_x = 0
            self.primary_y = 0
            self.primary_width = total_width
            self.primary_height = total_height
            
            # –°–ø—Ä–æ–±–∞ –≤–∏—è–≤–∏—Ç–∏ multi-monitor setup
            try:
                result = subprocess.run(['xrandr'], capture_output=True, text=True, timeout=2)
                if result.returncode == 0:
                    for line in result.stdout.split('\n'):
                        if ' connected primary ' in line:
                            parts = line.split()
                            for part in parts:
                                if 'x' in part and '+' in part:
                                    resolution_pos = part.split('+')
                                    if len(resolution_pos) >= 3:
                                        resolution = resolution_pos[0]
                                        self.primary_x = int(resolution_pos[1])
                                        self.primary_y = int(resolution_pos[2])
                                        
                                        if 'x' in resolution:
                                            w, h = resolution.split('x')
                                            self.primary_width = int(w)
                                            self.primary_height = int(h)
                                    break
                            break
            except (subprocess.TimeoutExpired, FileNotFoundError, ValueError):
                logger.debug("xrandr –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è")
            
            logger.info(f"–ì–æ–ª–æ–≤–Ω–∏–π –º–æ–Ω—ñ—Ç–æ—Ä: {self.primary_width}x{self.primary_height} –Ω–∞ ({self.primary_x}, {self.primary_y})")
            
        except Exception as e:
            logger.warning(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏—è–≤–ª–µ–Ω–Ω—è –º–æ–Ω—ñ—Ç–æ—Ä–∞: {e}")
            # Fallback –∑–Ω–∞—á–µ–Ω–Ω—è
            self.primary_x = 0
            self.primary_y = 0
            self.primary_width = 1920
            self.primary_height = 1080

    def _ensure_primary_monitor(self):
        """–ó–∞–±–µ–∑–ø–µ—á—É—î –∑–∞–ª–∏—à–µ–Ω–Ω—è –≤—ñ–∫–Ω–∞ –Ω–∞ –≥–æ–ª–æ–≤–Ω–æ–º—É –º–æ–Ω—ñ—Ç–æ—Ä—ñ"""
        try:
            current_x = self.root.winfo_x()
            current_y = self.root.winfo_y()
            
            if current_x != self.primary_x or current_y != self.primary_y:
                self.root.geometry(f"{self.primary_width}x{self.primary_height}+{self.primary_x}+{self.primary_y}")
                logger.debug(f"–í—ñ–∫–Ω–æ –ø–æ–≤–µ—Ä–Ω—É—Ç–æ –Ω–∞ –≥–æ–ª–æ–≤–Ω–∏–π –º–æ–Ω—ñ—Ç–æ—Ä")
            
        except Exception as e:
            logger.warning(f"–ü–æ–º–∏–ª–∫–∞ –∫–æ—Ä–µ–∫—Ü—ñ—ó –ø–æ–∑–∏—Ü—ñ—ó –º–æ–Ω—ñ—Ç–æ—Ä–∞: {e}")

    def setup_responsive_design(self):
        """–ù–∞–ª–∞—à—Ç–æ–≤—É—î responsive design"""
        self.scale_factor = min(self.window_width, self.window_height) / config.design['scale_factor_base']
        self.fonts = theme_manager.get_fonts(self.window_width, self.window_height)
        
        logger.debug(f"Responsive Design: {self.window_width}x{self.window_height}, Scale: {self.scale_factor:.2f}")

    def setup_styles(self):
        """–ó–∞—Å—Ç–æ—Å–æ–≤—É—î –ø–æ–≤–Ω—É Bertrandt —Ç–µ–º—É"""
        apply_bertrandt_theme(self.root, reapply=True)
        self.style = ttk.Style()
        
        # –î–æ–¥–∞—Ç–∫–æ–≤—ñ —Å—Ç–∏–ª—ñ –¥–ª—è —Å—É—á–∞—Å–Ω–æ—ó —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó
        self.style.configure('TFrame', 
                           background=THEME_VARS["bg"],
                           relief='flat',
                           borderwidth=0)
        
        self.style.configure('TLabel',
                           background=THEME_VARS["bg"],
                           foreground=THEME_VARS["text"],
                           font=(THEME_VARS["font_family"], THEME_VARS["size_body"]))
        
        self.style.configure('TButton',
                           background=THEME_VARS["brand_600"],
                           foreground="#ffffff",
                           font=(THEME_VARS["font_family"], THEME_VARS["size_body"], "bold"),
                           relief='flat',
                           borderwidth=0,
                           padding=(THEME_VARS["pad"], THEME_VARS["pad"] // 2))

    def setup_gui_components(self):
        """–°—Ç–≤–æ—Ä—é—î Bertrandt layout —Å—Ç—Ä—É–∫—Ç—É—Ä—É"""
        # –ì–æ–ª–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        self.main_container = ttk.Frame(self.root, style="TFrame")
        self.main_container.pack(fill='both', expand=True, padx=14, pady=12)
        
        # Navbar
        self.navbar = ttk.Frame(self.main_container, style="Glass.TFrame", padding=(12, 10))
        self.navbar.pack(side="top", fill="x", pady=(0, 12))
        self._setup_navbar()
        
        # Hero –æ–±–ª–∞—Å—Ç—å
        self.hero_outer, self.hero = self._make_glass_card(self.main_container, padding=16)
        self.hero_outer.pack(fill="x", pady=(0, 12))
        self._setup_hero()
        
        # Grid –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        self.grid_container = ttk.Frame(self.main_container, style="TFrame")
        self.grid_container.pack(fill="both", expand=True, pady=(0, 12))
        self.grid_container.columnconfigure((0,1,2), weight=1)
        self.grid_container.rowconfigure((0,1), weight=1)
        
        # Content –æ–±–ª–∞—Å—Ç—å –¥–ª—è —Ç–∞–±—ñ–≤
        self.tab_content_frame = self.grid_container
        
        # Footer
        self.footer_frame = ttk.Frame(self.main_container, style="TFrame")
        self.footer_frame.pack(side="bottom", fill="x")
        ttk.Separator(self.footer_frame).pack(fill="x", pady=6)
        self.footer_label = ttk.Label(
            self.footer_frame, 
            text="¬© 2025 Bertrandt AG - Dynamic Messe Stand V4 - –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∞ –≤–µ—Ä—Å—ñ—è", 
            style="Muted.TLabel"
        )
        self.footer_label.pack()
        
        logger.info("‚úÖ Bertrandt layout —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å—Ç–≤–æ—Ä–µ–Ω–∞")

    def _make_glass_card(self, parent, padding=12):
        """–°—Ç–≤–æ—Ä—é—î glass-card —É Bertrandt —Å—Ç–∏–ª—ñ"""
        outer = ttk.Frame(parent, style="TFrame")
        
        cv = tk.Canvas(outer, bg=THEME_VARS["bg"], highlightthickness=0, bd=0, height=1)
        cv.grid(row=0, column=0, sticky="nsew")
        outer.grid_rowconfigure(0, weight=1)
        outer.grid_columnconfigure(0, weight=1)
        
        inner = ttk.Frame(outer, style="Glass.TFrame", padding=padding)
        inner.place(relx=0, rely=0, relwidth=1, relheight=1)
        
        def _redraw(_evt=None):
            cv.delete("all")
            w = outer.winfo_width()
            h = outer.winfo_height()
            if w < 2 or h < 2: 
                return
            cv.create_rectangle(1, 1, w-2, h-2, outline=THEME_VARS["elev_outline"], width=1)
            cv.create_rectangle(2, 2, w-3, h-3, outline="", fill=_mix(THEME_VARS["panel"], "#ffffff", 0.04))
        
        outer.bind("<Configure>", _redraw)
        return outer, inner

    def _setup_navbar(self):
        """–°—Ç–≤–æ—Ä—é—î navbar"""
        # –õ—ñ–≤–∞ —á–∞—Å—Ç–∏–Ω–∞ - –ª–æ–≥–æ—Ç–∏–ø + –∑–∞–≥–æ–ª–æ–≤–æ–∫
        left_frame = ttk.Frame(self.navbar, style="TFrame")
        left_frame.pack(side="left")
        
        self._load_logo(left_frame)
        
        title_label = ttk.Label(left_frame, text="Dynamic Messe Stand V4", style="H2.TLabel")
        title_label.pack(side="left")
        
        # –ü—Ä–∞–≤–∞ —á–∞—Å—Ç–∏–Ω–∞ - –Ω–∞–≤—ñ–≥–∞—Ü—ñ—è
        right_frame = ttk.Frame(self.navbar, style="TFrame")
        right_frame.pack(side="right")
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
        nav_buttons = [
            ("Home", "home"),
            ("Demo", "demo"), 
            ("Creator", "creator"),
            ("Presentation", "presentation")
        ]
        
        self.nav_buttons = {}
        for text, tab_name in nav_buttons:
            btn = ttk.Button(
                right_frame, 
                text=text, 
                style="Ghost.TButton",
                command=lambda t=tab_name: self.switch_tab(t)
            )
            btn.pack(side="left", padx=6)
            self.nav_buttons[tab_name] = btn
        
        # –°—Ç–∞—Ç—É—Å —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä
        self.status_indicator = ttk.Label(
            right_frame, text="‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞", style="Muted.TLabel"
        )
        self.status_indicator.pack(side="left", padx=12)
        
        # –°–∏—Å—Ç–µ–º–Ω–∏–π —Ç–µ—Å—Ç –∫–Ω–æ–ø–∫–∞
        test_btn = ttk.Button(
            right_frame, 
            text="üîß –¢–µ—Å—Ç", 
            style="Primary.TButton",
            command=self._run_system_test
        )
        test_btn.pack(side="left", padx=6)

    def _setup_hero(self):
        """–°—Ç–≤–æ—Ä—é—î hero –æ–±–ª–∞—Å—Ç—å"""
        eyebrow = ttk.Label(
            self.hero, 
            text="–û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –≤–∏—Å—Ç–∞–≤–æ–∫", 
            foreground=_mix(THEME_VARS["brand_600"], "#9cc7fb", 0.5)
        )
        eyebrow.pack(anchor="w")
        
        title = ttk.Label(
            self.hero, 
            text="Bertrandt Dynamic Messe Stand V4 - –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–æ", 
            style="H1.TLabel"
        )
        title.pack(anchor="w", pady=(4, 4))
        
        description = ttk.Label(
            self.hero, 
            text="–°—Ç–∞–±—ñ–ª—å–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –∑ —Ä–æ–∑—É–º–Ω–æ—é —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—î—é –º—ñ–∂ Creator —Ç–∞ Demo, –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–º –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è–º —Ç–∞ –ø–æ–≤–Ω–æ—Ü—ñ–Ω–Ω–∏–º Asset Browser.", 
            style="Muted.TLabel", 
            wraplength=900, 
            justify="left"
        )
        description.pack(anchor="w")

    def _load_logo(self, parent_frame):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π –ª–æ–≥–æ—Ç–∏–ø"""
        try:
            from PIL import Image, ImageTk
            from core.theme import get_logo_filename
            import os
            
            logo_filename = get_logo_filename()
            logo_path = os.path.join(os.path.dirname(__file__), "..", "assets", logo_filename)
            
            if os.path.exists(logo_path):
                logo_image = Image.open(logo_path)
                logo_height = 28
                logo_width = int((logo_image.width * logo_height) / logo_image.height)
                logo_image = logo_image.resize((logo_width, logo_height), Image.Resampling.LANCZOS)
                
                self.logo_photo = ImageTk.PhotoImage(logo_image)
                
                self.logo_label = ttk.Label(parent_frame, image=self.logo_photo, style="TLabel")
                self.logo_label.pack(side="left", padx=(0, 10))
                
                logger.info("Bertrandt –ª–æ–≥–æ—Ç–∏–ø —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ")
                return
                
        except Exception as e:
            logger.warning(f"–ù–µ–º–æ–∂–ª–∏–≤–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ª–æ–≥–æ—Ç–∏–ø: {e}")
        
        # Fallback —Ç–µ–∫—Å—Ç
        title_label = ttk.Label(
            parent_frame,
            text="Dynamic Messe Stand V4",
            style="H2.TLabel"
        )
        title_label.pack(side="left")

    def setup_tabs(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –≤—Å—ñ tab –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ –∑ –Ω–∞–ª–µ–∂–Ω–∏–º–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞–º–∏"""
        logger.info("–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç–∞–±—ñ–≤ –∑ –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–æ—é —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—î—é...")
        
        try:
            self.tabs = {
                'home': HomeTab(self.tab_content_frame, self),
                'demo': DemoTab(self.tab_content_frame, self),
                'creator': CreatorTab(self.tab_content_frame, self), 
                'presentation': PresentationTab(self.tab_content_frame, self)
            }
            
            # –ü—Ä–∏—Ö–æ–≤–∞—Ç–∏ –≤—Å—ñ —Ç–∞–±–∏ —Å–ø–æ—á–∞—Ç–∫—É
            for tab in self.tabs.values():
                if hasattr(tab, 'hide'):
                    tab.hide()
            
            logger.info("‚úÖ –í—Å—ñ —Ç–∞–±–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ")
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó —Ç–∞–±—ñ–≤: {e}")
            self.tabs = {}

    def switch_tab(self, tab_name):
        """–†–æ–∑—É–º–Ω–µ –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è —Ç–∞–±—ñ–≤ –∑ –∞–≤—Ç–æ–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è–º"""
        try:
            logger.debug(f"–ü–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –Ω–∞ —Ç–∞–±: {tab_name}")
            
            # –ê–≤—Ç–æ–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ Creator –ø—Ä–∏ –≤–∏—Ö–æ–¥—ñ (—Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ)
            if (self.current_tab == 'creator' and 'creator' in self.tabs and 
                hasattr(self.tabs['creator'], 'save_current_slide_content')):
                
                logger.debug("–í–∏–∫–æ–Ω—É—é –∞–≤—Ç–æ–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–∏ –∑–º—ñ–Ω—ñ —Ç–∞–±—É...")
                try:
                    self.tabs['creator'].save_current_slide_content()
                except Exception as e:
                    logger.warning(f"–ê–≤—Ç–æ–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–µ –≤–¥–∞–ª–æ—Å—è: {e}")
            
            # –ü—Ä–∏—Ö–æ–≤–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π —Ç–∞–±
            if self.current_tab in self.tabs and hasattr(self.tabs[self.current_tab], 'hide'):
                self.tabs[self.current_tab].hide()
            
            # –ü–æ–∫–∞–∑–∞—Ç–∏ –Ω–æ–≤–∏–π —Ç–∞–±
            if tab_name in self.tabs:
                if hasattr(self.tabs[tab_name], 'show'):
                    self.tabs[tab_name].show()
                
                # –û–Ω–æ–≤–∏—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –ø—Ä–∏ –ø–æ—Ç—Ä–µ–±—ñ
                self._refresh_tab_content(tab_name)
            
            # –û–Ω–æ–≤–∏—Ç–∏ navbar
            self._update_navbar_active_tab(tab_name)
            
            self.current_tab = tab_name
            logger.debug(f"‚úÖ –ü–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –Ω–∞ {tab_name} –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –Ω–∞ —Ç–∞–± {tab_name}: {e}")

    def _refresh_tab_content(self, tab_name):
        """–û–Ω–æ–≤–ª—é—î –∫–æ–Ω—Ç–µ–Ω—Ç —Ç–∞–±—É –ø—Ä–∏ –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—ñ"""
        try:
            tab = self.tabs.get(tab_name)
            if not tab:
                return
            
            if tab_name == 'demo' and hasattr(tab, 'load_current_slide'):
                tab.load_current_slide()
            elif tab_name == 'creator' and hasattr(tab, 'load_slide_to_editor'):
                current_slide = getattr(tab, 'current_edit_slide', 1)
                tab.load_slide_to_editor(current_slide)
            elif tab_name == 'home' and hasattr(tab, 'refresh_content'):
                tab.refresh_content()
                
        except Exception as e:
            logger.debug(f"–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É —Ç–∞–±—É {tab_name}: {e}")

    def _update_navbar_active_tab(self, active_tab):
        """–û–Ω–æ–≤–ª—é—î –∞–∫—Ç–∏–≤–Ω–∏–π —Ç–∞–± —É navbar"""
        for tab_name, button in self.nav_buttons.items():
            if tab_name == active_tab:
                button.configure(style="Primary.TButton")
            else:
                button.configure(style="Ghost.TButton")

    def _update_status_indicator(self, message):
        """–û–Ω–æ–≤–ª—é—î —Å—Ç–∞—Ç—É—Å —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑ –∞–≤—Ç–æ—Å–∫–∏–¥–∞–Ω–Ω—è–º"""
        if hasattr(self, 'status_indicator'):
            self.status_indicator.configure(text=f"üîÑ {message}")
            # –ü–æ–≤–µ—Ä–Ω—É—Ç–∏ –¥–æ –±–∞–∑–æ–≤–æ–≥–æ —Å—Ç–∞–Ω—É —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥–∏
            self.root.after(3000, lambda: self.status_indicator.configure(text="‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞"))

    def _run_system_test(self):
        """–ó–∞–ø—É—Å–∫–∞—î —Å–∏—Å—Ç–µ–º–Ω–∏–π —Ç–µ—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ"""
        try:
            from tkinter import messagebox
            
            test_results = []
            
            # –¢–µ—Å—Ç Content Manager
            try:
                from models.content import content_manager
                slides_count = content_manager.get_slide_count()
                test_results.append(f"‚úÖ Content Manager: {slides_count} —Å–ª–∞–π–¥—ñ–≤")
                
                # –¢–µ—Å—Ç Assets
                assets = content_manager.get_available_assets()
                total_assets = sum(len(v) for v in assets.values())
                test_results.append(f"‚úÖ Assets: {total_assets} –¥–æ—Å—Ç—É–ø–Ω–æ")
                
            except Exception as e:
                test_results.append(f"‚ùå Content Manager: {e}")
            
            # –¢–µ—Å—Ç —Ç–∞–±—ñ–≤
            active_tabs = len([t for t in self.tabs.values() if hasattr(t, 'show')])
            test_results.append(f"‚úÖ –¢–∞–±–∏: {active_tabs}/{len(self.tabs)} –∞–∫—Ç–∏–≤–Ω—ñ")
            
            # –¢–µ—Å—Ç —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó
            observer_active = hasattr(self, '_on_content_changed')
            test_results.append(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è: {'–ê–∫—Ç–∏–≤–Ω–∞' if observer_active else '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}")
            
            results_text = "–°–ò–°–¢–ï–ú–ù–ò–ô –¢–ï–°–¢:\n\n" + "\n".join(test_results)
            results_text += "\n\n–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:\n1. –í—ñ–¥–∫—Ä–∏–π—Ç–µ Creator\n2. –î–æ–¥–∞–π—Ç–µ —Ç–µ–∫—Å—Ç/–∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è\n3. –ó–±–µ—Ä–µ–∂—ñ—Ç—å –∑–º—ñ–Ω–∏\n4. –ü–µ—Ä–µ–π–¥—ñ—Ç—å —É Demo - –∑–º—ñ–Ω–∏ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—é—Ç—å—Å—è"
            
            messagebox.showinfo("–°–∏—Å—Ç–µ–º–Ω–∏–π —Ç–µ—Å—Ç", results_text)
            logger.info("–°–∏—Å—Ç–µ–º–Ω–∏–π —Ç–µ—Å—Ç –≤–∏–∫–æ–Ω–∞–Ω–æ")
            
        except Exception as e:
            messagebox.showerror("–°–∏—Å—Ç–µ–º–Ω–∏–π —Ç–µ—Å—Ç", f"–ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: {e}")
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Ç–µ—Å—Ç—É: {e}")

    def force_refresh_all_tabs(self):
        """–ü—Ä–∏–º—É—Å–æ–≤–æ –æ–Ω–æ–≤–ª—é—î –≤—Å—ñ —Ç–∞–±–∏ (–¥–ª—è –∑–æ–≤–Ω—ñ—à–Ω—ñ—Ö –≤–∏–∫–ª–∏–∫—ñ–≤)"""
        try:
            logger.info("üîÑ –ü—Ä–∏–º—É—Å–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—Å—ñ—Ö —Ç–∞–±—ñ–≤...")
            
            for tab_name, tab in self.tabs.items():
                try:
                    if tab_name == 'demo' and hasattr(tab, 'create_slides_list'):
                        tab.create_slides_list()
                    elif tab_name == 'creator' and hasattr(tab, 'create_slide_thumbnails'):
                        tab.create_slide_thumbnails()
                    elif tab_name == 'home' and hasattr(tab, 'refresh_content'):
                        tab.refresh_content()
                except Exception as e:
                    logger.debug(f"–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∞–±—É {tab_name}: {e}")
            
            self._update_status_indicator("–í—Å—ñ —Ç–∞–±–∏ –æ–Ω–æ–≤–ª–µ–Ω–æ")
            logger.info("‚úÖ –ü—Ä–∏–º—É—Å–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏–º—É—Å–æ–≤–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {e}")

    def toggle_fullscreen(self, event=None):
        """–ü–µ—Ä–µ–º–∏–∫–∞—î –ø–æ–≤–Ω–æ–µ–∫—Ä–∞–Ω–Ω–∏–π —Ä–µ–∂–∏–º"""
        self.fullscreen = not self.fullscreen
        self.root.attributes('-fullscreen', self.fullscreen)
        logger.debug(f"Fullscreen: {'—É–≤—ñ–º–∫–Ω–µ–Ω–æ' if self.fullscreen else '–≤–∏–º–∫–Ω–µ–Ω–æ'}")

    def exit_fullscreen(self, event=None):
        """–í–∏—Ö–æ–¥–∏—Ç—å –∑ –ø–æ–≤–Ω–æ–µ–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º—É"""
        if self.fullscreen:
            self.fullscreen = False
            self.root.attributes('-fullscreen', False)
            self.root.attributes('-topmost', False)
            
            self.root.geometry(f"{self.primary_width}x{self.primary_height}+{self.primary_x}+{self.primary_y}")
            logger.debug("Fullscreen –≤–∏–º–∫–Ω–µ–Ω–æ - –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –Ω–∞ –≥–æ–ª–æ–≤–Ω–æ–º—É –º–æ–Ω—ñ—Ç–æ—Ä—ñ")

    def quit_application(self):
        """–ó–∞–≤–µ—Ä—à—É—î –ø—Ä–æ–≥—Ä–∞–º—É –∑ –Ω–∞–ª–µ–∂–Ω–æ—é –æ—á–∏—Å—Ç–∫–æ—é"""
        logger.info("üßπ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–∞–º–∏...")
        
        # –§—ñ–Ω–∞–ª—å–Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑ Creator
        try:
            if ('creator' in self.tabs and 
                hasattr(self.tabs['creator'], 'save_current_slide_content')):
                logger.info("üíæ –§—ñ–Ω–∞–ª—å–Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è...")
                self.tabs['creator'].save_current_slide_content()
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Ñ—ñ–Ω–∞–ª—å–Ω–æ–≥–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è: {e}")
        
        # –í—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è Hardware
        try:
            from models.hardware import hardware_manager
            hardware_manager.disconnect_all()
        except Exception as e:
            logger.debug(f"Hardware disconnect –ø–æ–º–∏–ª–∫–∞: {e}")
        
        # –ó—É–ø–∏–Ω–∫–∞ Demo —Å–µ—Ä–≤—ñ—Å—É
        try:
            from services.demo import demo_service
            demo_service.stop_demo()
        except Exception as e:
            logger.debug(f"Demo service stop –ø–æ–º–∏–ª–∫–∞: {e}")
        
        # –ó–∞–∫—Ä–∏—Ç–∏ GUI
        self.root.quit()
        logger.info("üëã Dynamic Messe Stand V4 –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        sys.exit(0)
        
    def make_glass_card(self, parent, padding=12):
    """Erstellt glass-card im Bertrandt Stil"""
    colors = theme_manager.get_colors()
    
    outer = ttk.Frame(parent, style="TFrame")
    inner = ttk.Frame(outer, style="Glass.TFrame", padding=padding)
    inner.place(relx=0, rely=0, relwidth=1, relheight=1)
    
    return outer, inner
    
    def run(self):
        """–ó–∞–ø—É—Å–∫–∞—î GUI –≥–æ–ª–æ–≤–Ω–∏–π —Ü–∏–∫–ª"""
        try:
            logger.info("GUI –≥–æ–ª–æ–≤–Ω–∏–π —Ü–∏–∫–ª –∑–∞–ø—É—â–µ–Ω–æ")
            self.root.mainloop()
        except KeyboardInterrupt:
            logger.info("–ü—Ä–æ–≥—Ä–∞–º—É –ø–µ—Ä–µ—Ä–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
            self.quit_application()
        except Exception as e:
            logger.error(f"–ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ GUI —Ü–∏–∫–ª—ñ: {e}")
            self.quit_application()
